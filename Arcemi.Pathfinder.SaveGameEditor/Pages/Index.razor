@page "/"
@using System.IO
@inject MainViewModel Model

<fieldset class="form-controller" disabled="@IsBusy">

<p>
    Start by selecting the save game file you want to edit.<br />
    For a better experience with the editor, select the game folder under settings at any time.
</p>
<div>
    <button class="btn btn-info" @onclick="OpenFile">
        <span class="oi oi-file"></span>
        Open
    </button>
    <button class="btn btn-info" @onclick="SaveFile">
        <span class="oi oi-data-transfer-download"></span>
        Save
    </button>
</div>

@if (Model.CanEdit) {
<div class="row g-3">
    <div class="col-md-12">
        <label class="form-label">Path</label>
        <input class="form-control" type="text" readonly="readonly" value="@Model.CurrentPath" />
    </div>
</div>
<div class="row g-3">
    <div class="col-md-4">
        <label class="form-label">Money</label>
        <input class="form-control" type="number" @bind="@Model.Player.Money" />
    </div>
    @if (Model.Player.Corruption != null) {
    <div class="col-md-2">
        <label class="form-label">Corruption</label>
        <input class="form-control" type="number" @bind="@Model.Player.Corruption.CurrentValue" />
    </div>
    }
</div>
<div class="row g-3">
    <h4 class="col-md-12">Game Time</h4>
</div>
<div class="row g-3">
    <div class="col-md-2">
        <label class="form-label">Days</label>
        <input class="form-control" type="text" @bind="Model.Player.GameTimeParts.Days" />
    </div>
    <div class="col-md-2">
        <label class="form-label">Hours</label>
        <input class="form-control" type="text" @bind="Model.Player.GameTimeParts.Hours" />
    </div>
    <div class="col-md-2">
        <label class="form-label">Minutes</label>
        <input class="form-control" type="text" @bind="Model.Player.GameTimeParts.Minutes" />
    </div>
</div>
}
</fieldset>

@code {
    private bool IsBusy = true;

    protected override async Task OnInitializedAsync()
    {
        IsBusy = false;
    }

    async Task OpenFile()
    {
        IsBusy = true;
        var window = ElectronNET.API.Electron.WindowManager.BrowserWindows.First();
        string folder = null;
        if (Model.Config.AppDataFolder != null) {
            folder = Path.Combine(Model.Config.AppDataFolder, "Saved Games");
            if (!Directory.Exists(folder)) folder = Model.Config.AppDataFolder;
            if (!Directory.Exists(folder)) folder = null;
        }

        var options = new ElectronNET.API.Entities.OpenDialogOptions {
            Title = "Select the save game file",
            Properties = new[] { ElectronNET.API.Entities.OpenDialogProperty.openFile},
            Filters = new[] { new ElectronNET.API.Entities.FileFilter { Extensions = new[] { "*.zks" } } },
            DefaultPath = folder
        };
        var files = await ElectronNET.API.Electron.Dialog.ShowOpenDialogAsync(window, options);
        var file = files?.FirstOrDefault();
        if (!string.IsNullOrEmpty(file)) {
            await Model.OpenAsync(file);
        }
        IsBusy = false;
    }

    async Task SaveFile()
    {
        IsBusy = true;
        var window = ElectronNET.API.Electron.WindowManager.BrowserWindows.First();
        var options = new ElectronNET.API.SaveDialogOptions {
            Title = "Save the game file",
            Filters = new[] { new ElectronNET.API.Entities.FileFilter { Extensions = new[] { "*.zks" } } }
        };
        var file = await ElectronNET.API.Electron.Dialog.ShowSaveDialogAsync(window, options);
        if (!string.IsNullOrEmpty(file)) {
            await Model.SaveAsync(file);
        }
        IsBusy = false;
    }
}