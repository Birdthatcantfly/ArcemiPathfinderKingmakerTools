@page "/Armies"
@using System.IO
@using Arcemi.Pathfinder.SaveGameEditor.Components.Modals;
@inject ArmiesViewModel Model

@if (!Model.CanEdit) {
    <p><em>Save file not loaded.</em></p>
}
else if (!Model.HasArmies) {
    <p><em>No armies found.</em></p>
}
else {
    <p>Select the army you want to edit.</p>
    <ul class="portraits leaders">
        @foreach (var unit in Model.Armies) {
        <li @onclick="() => SelectArmy(unit)" class="@(Unit == unit ? "toggled" : "")">
            <img src="file://@Model.FindLeaderPortrait(unit)" alt="Portrait" />
            <span>@unit.Data.ArmyName.Name</span>
        </li>
        }
    </ul>
    @if (Unit != null) {
        <div class="row g-3">
            <div class="col-md-6">
                <label class="form-label">Name</label>
                <input class="form-control" type="text" @bind="@Unit.Data.ArmyName.Name" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Type</label>
                <input class="form-control" type="text" readonly="readonly" value="@Unit.ArmyType" />
            </div>
        </div>
        <div class="row g-3">
            <div class="col-md-6">
                <label class="form-label">Leader</label>
                <input class="form-control" type="text" readonly="readonly" value="@Unit.Data.LeaderGuid" />
            </div>
        </div>
        <div class="row g-3">
            <div class="col-md-3">
                <label class="form-label">Movement points</label>
                <input class="form-control" type="number" @bind="@Unit.MovementPointsRounded" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Morale</label>
                <input class="form-control" type="number" @bind="@Unit.Data.ArmyMorale.Value" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Max squad count</label>
                <input class="form-control" type="number" @bind="@Unit.Data.MaxSquadsCount.BaseValue" />
            </div>
        </div>
        <div class="row g-3">
            <h3 class="col-md-2">Squads</h3>
            <div class="col-md-2 header-toolbar">
                <button class="btn btn-info" disabled="@(Unit.Data.Squads.Count >= MaxSquadCount)" @onclick="() => modalAddArmyUnit.OpenAsync()">
                    <span class="oi oi-plus"></span>
                </button>
                <Modal @ref="modalAddArmyUnit">
                    <Title>Add army unit</Title>
                    <Body>
                        <div class="row g-3">
                            <div class="col-md-12">
                                <label for="add-unit-type" class="form-label">Known Types</label>
                                <select id="add-unit-type" class="form-control" @bind="KnownArmyUnitBlueprint">
                                    <option value="X">Custom</option>
                                    @foreach (var type in AllArmyUnitTypes) {
                                        <option value="@type.Id">@type.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="row g-3">
                            <div class="col-md-12">
                                <label for="add-item-blueprint" class="form-label">Custom Blueprint</label>
                                <input id="add-item-blueprint" type="text" class="form-control" disabled="@(KnownArmyUnitBlueprint != "X")" @bind="CustomArmyUnitBlueprint" />
                            </div>
                        </div>
                    </Body>
                    <Footer>
                        <button type="button" class="btn btn-primary" data-dismiss="modal" disabled="@(!IsArmyUnitInputValid)" @onclick="() => AddArmyUnitAsync()">Confirm</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalAddArmyUnit.CloseAsync()">Cancel</button>
                    </Footer>
                </Modal>
            </div>
        </div>
        <div class="row g-3">
            <div class="col-md-4 form-list-header">
                <label class="form-label">Name</label>
            </div>
            <div class="col-md-2 form-list-header">
                <label class="form-label">Number</label>
            </div>
            <div class="col-md-2">
            </div>
            <div class="col-md-2">
            </div>
        </div>
        @foreach (var squad in Unit.Data.Squads) {
            <div class="row g-3">
                <div class="col-md-4">
                    <label class="form-label">@squad.DisplayName</label>
                </div>
                <div class="col-md-2">
                    <input class="form-control" type="number" @bind="@squad.Count" />
                </div>
                <div class="col-md-2">
                </div>
                <div class="col-md-2">
                </div>
            </div>
        }
    }
}

@code {
    private bool IsBusy = true;
    private PlayerArmyModel Unit;

    private Modal modalAddArmyUnit;
    private const int MaxSquadCount = 14;

    private static IEnumerable<ResourceMapping> AllArmyUnitTypes = Mappings.GetResources(ResourceMappingType.ArmyUnit);

    private string KnownArmyUnitBlueprint = "X";
    private string CustomArmyUnitBlueprint;
    private bool IsArmyUnitInputValid => KnownArmyUnitBlueprint != "X" || !string.IsNullOrEmpty(CustomArmyUnitBlueprint);

    private async Task AddArmyUnitAsync()
    {
        var squad = Unit.Data.Squads.Add();
        squad.Guid = Guid.NewGuid().ToString();
        squad.Count = 10;
        if (KnownArmyUnitBlueprint == "X") {
            squad.Unit = CustomArmyUnitBlueprint;
        }
        else {
            squad.Unit = KnownArmyUnitBlueprint;
        }

        var emptyIndex = Unit.Data.SquadsPosition.FirstEmptyIndex();
        Unit.Data.SquadsPosition.SetRef(emptyIndex, squad);
        await modalAddArmyUnit.CloseAsync();
        KnownArmyUnitBlueprint = "X";
        CustomArmyUnitBlueprint = "";
    }

    protected override async Task OnInitializedAsync()
    {
        IsBusy = false;
    }

    public async Task SelectArmy(PlayerArmyModel unit)
    {
        Unit = unit;
    }
}