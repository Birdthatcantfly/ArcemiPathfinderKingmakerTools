@page "/SaveAs"
@using System.IO
@inject MainViewModel Model
@inject NavigationManager NavManager
@inject StateManager State

@if (!Model.CanEdit) {
    <p><em>Save file not loaded.</em></p>
}
else {
<fieldset class="form-controller" disabled="@State.IsBusy">

<div class="row">
    <div class="col-sm-6 col-md-4 col-lg-3">
        <button class="btn btn-sm btn-info w-100" disabled="@(!Model.CanEdit)" @onclick="SaveFile">
            <span class="oi oi-data-transfer-download"></span>
            Save file dialog
        </button>
    </div>
</div>

<SaveGamesView>
    <SaveFileToolbar Context="header">
        @if (header.Header.IsManual) {
            <div class="row">
                <div class="col-md-12">
                    <button class="btn btn-sm btn-info w-100" @onclick="() => SaveFile(header)">
                        <span class="oi oi-data-transfer-download"></span>
                        Replace
                    </button>
                </div>
            </div>
        }
    </SaveFileToolbar>
</SaveGamesView>

</fieldset>
}

@code {
    async Task SaveFile()
    {
        await State.ExecuteAsync(async () => {
            var window = ElectronNET.API.Electron.WindowManager.BrowserWindows.First();
            var options = new ElectronNET.API.SaveDialogOptions {
                Title = "Save the game file",
                Filters = new[] { new ElectronNET.API.Entities.FileFilter { Extensions = new[] { "*.zks" } } },
                DefaultPath = Model.Location.FilePath
            };
            var file = await ElectronNET.API.Electron.Dialog.ShowSaveDialogAsync(window, options);
            if (!string.IsNullOrEmpty(file)) {
                await Model.SaveAsync(new SaveFileLocation(file));
                NavManager.NavigateTo("/Overview");
            }
        });
    }

    async Task SaveFile(SaveFileHeader header)
    {
        await State.ExecuteAsync(async () => {
            await Model.SaveAsync(header.Location);
            NavManager.NavigateTo("/Overview");
        });
    }
}