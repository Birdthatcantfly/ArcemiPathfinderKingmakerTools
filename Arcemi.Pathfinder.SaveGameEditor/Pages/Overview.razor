@page "/Overview"
@inject MainViewModel Model
@inject NavigationManager NavManager
@inject StateManager State

@if (!Model.CanEdit) {
    <p><em>Save file not loaded.</em></p>
}
else {
<p class="alert alert-info">The editor automatically backups any replaced files during save.
    If there are any backup file for the opened file, the "Open backup" button will be enabled.</p>

<fieldset class="form-controller" disabled="@State.IsBusy">

<div class="row g-3">
    <div class="col-sm-6 col-md-4 col-lg-3">
        <button class="btn btn-sm btn-info w-100" disabled="@(!Model.CanEdit)" @onclick="ReplaceFile">
            <span class="oi oi-data-transfer-download"></span>
            Save
        </button>
    </div>
    <div class="col-sm-6 col-md-4 col-lg-3">
        <button class="btn btn-sm btn-info w-100" title="Reloads the save file" @onclick="ReloadFile">
            <span class="oi oi-action-undo"></span>
            Reload
        </button>
    </div>
    <div class="col-sm-6 col-md-4 col-lg-3">
        <button class="btn btn-sm btn-info w-100" disabled="@(!(Model.Location?.BackupExists ?? false))" title="Open backup file for this save" @onclick="OpenBackupFile">
            <span class="oi oi-action-undo"></span>
            Open backup
        </button>
    </div>
</div>
<div class="row g-3">
    <div class="col-md-12">
        <label class="form-label">Path</label>
        <input class="form-control" type="text" readonly="readonly" value="@Model.Location?.FilePath" />
    </div>
</div>
<div class="row g-3">
    <div class="col-md-4">
        <label class="form-label">Money</label>
        <input class="form-control" type="number" @bind="@Model.Player.Money" />
    </div>
    @if (Model.Player.Corruption != null) {
    <div class="col-md-2">
        <label class="form-label">Corruption</label>
        <input class="form-control" type="number" @bind="@Model.Player.Corruption.CurrentValue" />
    </div>
    }
</div>
<div class="row g-3">
    <h4 class="col-md-12">Game Time</h4>
</div>
<div class="row g-3">
    <div class="col-md-2">
        <label class="form-label">Days</label>
        <input class="form-control" type="text" @bind="Model.Player.GameTimeParts.Days" />
    </div>
    <div class="col-md-2">
        <label class="form-label">Hours</label>
        <input class="form-control" type="text" @bind="Model.Player.GameTimeParts.Hours" />
    </div>
    <div class="col-md-2">
        <label class="form-label">Minutes</label>
        <input class="form-control" type="text" @bind="Model.Player.GameTimeParts.Minutes" />
    </div>
</div>

</fieldset>
}

@code {
    private async Task ReplaceFile()
    {
        await State.ExecuteAsync(async () => await Model.SaveAsync(Model.Location.Refresh()));
    }

    private async Task ReloadFile()
    {
        await State.ExecuteAsync(async () => await Model.OpenAsync(Model.Location.FilePath));
    }

    private async Task OpenBackupFile()
    {
        await State.ExecuteAsync(async () => await Model.OpenAsync(Model.Location.BackupFilePath));
    }

}
