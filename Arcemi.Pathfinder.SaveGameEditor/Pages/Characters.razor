@page "/Characters"
@inject CharacterViewModel Model
@inject Portraits Portraits
@using Arcemi.Pathfinder.SaveGameEditor.Components.Modals;

@if (Model.Characters == null) {
    <p><em>Save file not loaded.</em></p>
}
else {
    <p>Select the character you want to edit.</p>
    <ul class="portraits">
        @foreach (var unit in Model.Characters) {
        <li @onclick="() => SelectCharacter(unit)" class="@(Unit == unit ? "toggled" : "")">
            <img src="file://@unit.Descriptor.UISettings.PortraitPath" alt="Portrait" />
            <span>@(unit.Descriptor.CustomName ?? unit.Descriptor.Name)</span>
        </li>
        }
    </ul>
    @if (Character != null) {
        <div class="row g-3">
            <div class="col-md-6">
                <label class="form-label">Name</label>
                <input class="form-control" type="text" @bind="@Character.CustomName" placeholder="@Character.Name" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Blueprint</label>
                <input class="form-control" type="text" readonly="readonly" value="@Character.Blueprint" />
            </div>
        </div>
        <div class="row g-3">
            <div class="col-md-3">
                <label class="form-label">Race</label>
                <input class="form-control" type="text" readonly="readonly" value="@Character.Progression.RaceName" />
            </div>
            <div class="col-md-3">
                <div>
                    <label>&nbsp;</label>
                </div>
                <div>
                <button class="btn btn-info w-100" @onclick="() => modalChosePortrait.OpenAsync()">
                    <span class="oi oi-person"></span>
                    Portrait
                </button>
                <Modal @ref="modalChosePortrait">
                    <Title>Select new portrait</Title>
                    <Body>
                        <ul class="portraits portraits-selection">
                            @foreach (var portrait in Portraits.Available) {
                            <li @onclick="() => SelectPortrait(portrait)">
                                <img src="file://@portrait.Uri" alt="Portrait" />
                            </li>
                            }
                        </ul>
                    </Body>
                    <Footer>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalChosePortrait.CloseAsync()">Cancel</button>
                    </Footer>
                </Modal>
                </div>
            </div>
            <div class="col-md-3">
                <div>
                    <label>&nbsp;</label>
                </div>
                <div>
                @if (Model.IsPlayerButNotMainCharacter(Unit)) {
                <button class="btn btn-info w-100" @onclick="() => Model.SetAsHero(Unit)" title="You are not set as the main character, fix it by pressing this button">
                    <span class="oi oi-wrench"></span>
                    Main Char
                </button>
                }
                </div>
            </div>
        </div>

        <div class="row g-3">
            <div class="col-md-3">
                <div class="row g-3">
                    <div class="col-md-12">
                        <label class="form-label">Alignment X-Axis</label>
                        <input class="form-control" type="number" min="-100" max="100" @bind="EditAlignmentX" />
                    </div>
                </div>
                <div class="row g-3">
                    <div class="col-md-12">
                        <label class="form-label">Alignment Y-Axis</label>
                        <input class="form-control" type="number" min="-100" max="100" @bind="EditAlignmentY" />
                    </div>
                </div>
            </div>
            <div class="col-md-9 alignment">
                <img class="alignment-map" src="/images/alignment-map.png" alt="Alignment" />
                <img class="alignment-dot" src="/images/alignment-dot.png" style="left: @(AlignmentX)px; top: @(AlignmentY)px" />
            </div>
        </div>

        <div class="row g-3">
            <div class="col-md-3">
                <label class="form-label">Experience</label>
                <input class="form-control" type="number" @bind="@Character.Progression.Experience" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Level</label>
                <input class="form-control" type="number" readonly="readonly" value="@Character.Progression.CurrentLevel" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Mythic Level</label>
                <input class="form-control" type="number" readonly="readonly" value="@Character.Progression.MythicExperience" />
            </div>
        </div>

        <div class="row g-3">
            <h3 class="col-md-12">Classes</h3>
        </div>
        <div class="row g-3">
            <div class="col-md-4 form-list-header">
                <label class="form-label">Name</label>
            </div>
            <div class="col-md-4 form-list-header">
                <label class="form-label">Specialization</label>
            </div>
            <div class="col-md-2 form-list-header">
                <label class="form-label">Level</label>
            </div>
            <div class="col-md-2 form-list-header">
            </div>
        </div>

        @foreach (var cls in Character.Progression.Classes) {
        <div class="row g-3">
            <div class="col-md-4 overflow-hidden">
                <label class="form-label">@cls.TypeName</label>
            </div>
            <div class="col-md-4 overflow-hidden">
                <label class="form-label">@cls.ArchetypeName</label>
            </div>
            <div class="col-md-2">
                <input class="form-control" type="number" readonly="readonly" value="@cls.Level" />
            </div>
            <div class="col-md-2">
                @if (!cls.IsMythic) {
                <button class="btn btn-sm btn-warning" disabled="@(cls.Level <= 1)" @onclick="() => DowngradeClass(cls)">
                    <span class="oi oi-arrow-thick-bottom"></span>
                </button>
                }
            </div>
        </div>
        }

        @if (RankedFeatures.Any()) {
            <div class="row g-3">
                <h3 class="col-md-12">Ranked Feats</h3>
            </div>
            <div class="row g-3">
                <div class="col-md-4 form-list-header">
                    <label class="form-label">Name</label>
                </div>
                <div class="col-md-2 form-list-header">
                    <label class="form-label">Rank</label>
                </div>
                <div class="col-md-2 form-list-header">
                    <label class="form-label" title="The level the last rank was gained">Level</label>
                </div>
                <div class="col-md-4 form-list-header">
                </div>
            </div>

            @foreach (var feature in RankedFeatures) {
            <div class="row g-3">
                <div class="col-md-4 overflow-hidden">
                    <label class="form-label">@feature.DisplayName</label>
                </div>
                <div class="col-md-2">
                    <label class="form-label">@feature.Rank</label>
                </div>
                <div class="col-md-2">
                    <label class="form-label" title="The level the last rank was gained">@feature.SourceLevel</label>
                </div>
                <div class="col-md-4">
                    <button class="btn btn-sm btn-warning" disabled="@(feature.Rank <= 1)" @onclick="() => DownrankFeature(feature)">
                        <span class="oi oi-arrow-thick-bottom"></span>
                    </button>
                    <button class="btn btn-sm btn-warning" @onclick="() => UprankFeature(feature)">
                        <span class="oi oi-arrow-thick-top"></span>
                    </button>
                </div>
            </div>
            }
        }

        <div class="row g-3">
            <h3 class="col-md-12">General</h3>
        </div>
        <div class="row g-3">
            <div class="col-md-4 form-list-header">
                <label class="form-label">Name</label>
            </div>
            <div class="col-md-2 form-list-header">
                <label class="form-label">Value</label>
            </div>
            <div class="col-md-2 form-list-header">
                <label class="form-label">Total</label>
            </div>
            <div class="col-md-4">
            </div>
        </div>
        @foreach (var attr in Character.Stats.General) {
        <div class="row g-3">
            <div class="col-md-4">
                <label class="form-label">@attr.Name</label>
            </div>
            <div class="col-md-2">
                <input class="form-control" type="number" @bind="@attr.PairedValue" />
            </div>
            <div class="col-md-2">
                <input class="form-control" type="number" readonly="readonly" value="@attr.TotalValue" />
            </div>
            <div class="col-md-4">
            </div>
        </div>
        }

        <div class="row g-3">
            <h3 class="col-md-12">Attributes</h3>
        </div>
        <div class="row g-3">
            <div class="col-md-4 form-list-header">
                <label class="form-label">Name</label>
            </div>
            <div class="col-md-2 form-list-header">
                <label class="form-label">Value</label>
            </div>
            <div class="col-md-2 form-list-header">
                <label class="form-label">Modifiers</label>
            </div>
            <div class="col-md-4">
            </div>
        </div>
        @foreach (var attr in Character.Stats.Attributes) {
        <div class="row g-3">
            <div class="col-md-4">
                <label class="form-label">@attr.Name</label>
            </div>
            <div class="col-md-2">
                <input class="form-control" type="number" @bind="@attr.PairedValue" />
            </div>
            <div class="col-md-2">
                <input class="form-control" type="text" readonly="readonly" value="@attr.ModifiersSum" />
            </div>
            <div class="col-md-4">
            </div>
        </div>
        }

        <div class="row g-3">
            <h3 class="col-md-12">Skills</h3>
        </div>
        <div class="row g-3">
            <div class="col-md-4 form-list-header">
                <label class="form-label">Name</label>
            </div>
            <div class="col-md-2 form-list-header">
                <label class="form-label">Value</label>
            </div>
            <div class="col-md-2 form-list-header">
                <label class="form-label">Total</label>
            </div>
            <div class="col-md-4">
            </div>
        </div>
        @foreach (var attr in Character.Stats.Skills) {
        <div class="row g-3">
            <div class="col-md-4">
                <label class="form-label">@attr.Name</label>
            </div>
            <div class="col-md-2">
                <input class="form-control" type="number" @bind="@attr.BaseValue" />
            </div>
            <div class="col-md-2">
                <input class="form-control" type="number" readonly="readonly" value="@attr.PermanentValue" />
            </div>
            <div class="col-md-4">
            </div>
        </div>
        }

        <div class="row g-3">
            <h3 class="col-md-12">Combat</h3>
        </div>
        <div class="row g-3">
            <div class="col-md-4 form-list-header">
                <label class="form-label">Name</label>
            </div>
            <div class="col-md-2 form-list-header">
                <label class="form-label">Value</label>
            </div>
            <div class="col-md-2 form-list-header">
                <label class="form-label">Total</label>
            </div>
            <div class="col-md-4">
            </div>
        </div>
        @foreach (var attr in Character.Stats.Combat) {
        <div class="row g-3">
            <div class="col-md-4">
                <label class="form-label">@attr.Name</label>
            </div>
            <div class="col-md-2">
                <input class="form-control" type="number" @bind="@attr.BaseValue" />
            </div>
            <div class="col-md-2">
                <input class="form-control" type="number" readonly="readonly" value="@attr.PermanentValue" />
            </div>
            <div class="col-md-4">
            </div>
        </div>
        }

        <div class="row g-3">
            <h3 class="col-md-12">Saves</h3>
        </div>
        <div class="row g-3">
            <div class="col-md-4 form-list-header">
                <label class="form-label">Name</label>
            </div>
            <div class="col-md-2 form-list-header">
                <label class="form-label">Value</label>
            </div>
            <div class="col-md-2 form-list-header">
                <label class="form-label">Total</label>
            </div>
            <div class="col-md-4">
            </div>
        </div>
        @foreach (var attr in Character.Stats.Saves) {
        <div class="row g-3">
            <div class="col-md-4">
                <label class="form-label">@attr.Name</label>
            </div>
            <div class="col-md-2">
                <input class="form-control" type="number" @bind="@attr.BaseValue" />
            </div>
            <div class="col-md-2">
                <input class="form-control" type="number" readonly="readonly" value="@attr.PermanentValue" />
            </div>
            <div class="col-md-4">
            </div>
        </div>
        }
    }
}

@code {
    private CharacterModel Character => Unit?.Descriptor;
    private UnitEntityModel Unit;
    private Modal modalChosePortrait;
    private IEnumerable<FeatureFactItemModel> RankedFeatures;

    private const int OffsetX = 20;
    private const int OffsetY = 6;
    private int AlignmentX => (Unit?.Descriptor?.Alignment?.Vector?.X ?? 0) + 100 + OffsetX;
    private int AlignmentY => (Unit?.Descriptor?.Alignment?.Vector?.Y ?? 0) *-1 + 100 + OffsetY;
    private int EditAlignmentX { get => Unit?.Descriptor?.Alignment?.Vector?.X ?? 0; set => Unit.Descriptor.Alignment.Vector.X = value; }
    private int EditAlignmentY { get => (Unit?.Descriptor?.Alignment?.Vector?.Y ?? 0)*-1; set => Unit.Descriptor.Alignment.Vector.Y = value*-1; }

    protected override async Task OnInitializedAsync()
    {
    }

    public async Task SelectCharacter(UnitEntityModel unit)
    {
        Unit = unit;
        RankedFeatures = unit.FindRankedFeatures();
    }

    public async Task SelectPortrait(Portrait portrait)
    {
        Unit.Descriptor.UISettings.SetPortrait(portrait);
        await modalChosePortrait.CloseAsync();
    }

    public async Task DowngradeClass(ClassModel cls)
    {
        Model.DowngradeClass(Unit, cls);
    }

    public void UprankFeature(FeatureFactItemModel feature)
    {
        feature.Rank += 1;
        var rankToSource = feature.RankToSource.Insert(0);
        rankToSource.Blueprint = feature.Blueprint;
        rankToSource.Level = 1;
    }

    public void DownrankFeature(FeatureFactItemModel feature)
    {
        feature.Rank -= 1;
        if (feature.RankToSource.Count == 0) return;

        var duplicate = feature.RankToSource.GroupBy(rs => rs.Level).Where(g => g.Count() > 1).SelectMany(g => g).FirstOrDefault();
        if (duplicate != null) {
            feature.RankToSource.Remove(duplicate);
            return;
        }

        feature.RankToSource.RemoveAt(feature.RankToSource.Count - 1);
    }
}