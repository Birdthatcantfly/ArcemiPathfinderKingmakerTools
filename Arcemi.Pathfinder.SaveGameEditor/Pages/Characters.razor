@page "/Characters"
@inject CharacterViewModel Model
@inject IGameResourcesProvider Resources
@using Arcemi.Pathfinder.SaveGameEditor.Components
@using Arcemi.Pathfinder.SaveGameEditor.Components.Modals;

@if (!Model.CanEdit) {
    <p><em>Save file not loaded.</em></p>
}
else {
    <p class="alert alert-info">Select the character you want to edit.</p>
    <ul class="portraits">
        @foreach (var unit in Model.Characters) {
        <li @onclick="() => SelectCharacter(unit)" class="@(Unit == unit ? "toggled" : "")">
            <img src="file://@unit.Descriptor.UISettings.PortraitPath" alt="Portrait" />
            <span>@(unit.Descriptor.CustomName ?? unit.Descriptor.Name)</span>
        </li>
        }
    </ul>

    @if (Character != null) {
        <div class="row g-3">
            <div class="col-md-6">
                <label class="form-label">Name</label>
                <input class="form-control" type="text" @bind="Character.CustomName" placeholder="@Character.Name" />
            </div>
            <div class="col-md-3">
                <div>
                    <label>&nbsp;</label>
                </div>
                <div>
                <button class="btn btn-info w-100" @onclick="() => modalChosePortrait.OpenAsync()">
                    <span class="oi oi-person"></span>
                    Portrait
                </button>
                <Modal @ref="modalChosePortrait">
                    <Title>Select new portrait</Title>
                    <Body>
                        <ul class="portraits portraits-selection">
                            @foreach (var portrait in Unit.Descriptor.UISettings.AvailablePortraits) {
                            <li @onclick="() => SelectPortrait(portrait)">
                                <img src="file://@portrait.Uri" alt="Portrait" />
                            </li>
                            }
                        </ul>
                    </Body>
                    <Footer>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalChosePortrait.CloseAsync()">Cancel</button>
                    </Footer>
                </Modal>
                </div>
            </div>

            @if (CompanionPart != null && Character.IsCompanion) {
            <div class="col-md-3">
                <label class="form-label">State</label>
                <select class="form-control" @bind="CompanionPart.State">
                    @foreach (var state in CompanionPartState.All){
                        <option value="@state.Key">@state.Value</option>
                    }
                </select>
            </div>
            }
        </div>
        <TabControl StartIndex="0">
            <Tab Name="Overview">
                <Content>
                    <CharacterOverview Unit="Unit" />
                </Content>
            </Tab>
            <Tab Name="Features">
                <Content>
                    <CharacterFeatures Unit="Unit" />
                </Content>
            </Tab>
            <Tab Name="Stats">
                <Content>
                    <CharacterStats Unit="Unit" />
                </Content>
            </Tab>
            <Tab Name="Misc">
                <Content>
                    <CharacterMisc Unit="Unit" />
                </Content>
            </Tab>
        </TabControl>
    }
}

@code {
    private CharacterModel Character => Unit?.Descriptor;
    private UnitEntityModel Unit;
    private IEnumerable<FeatureFactItemModel> RankedFeatures;
    private CompanionPartItemModel CompanionPart => Unit?.Parts?.Items?.OfType<CompanionPartItemModel>()?.FirstOrDefault();

    private Modal modalChosePortrait;

    public async Task SelectCharacter(UnitEntityModel unit)
    {
        Unit = unit;
    }

    private async Task SelectPortrait(Portrait portrait)
    {
        Unit.Descriptor.UISettings.SetPortrait(portrait);
        await modalChosePortrait.CloseAsync();
    }
}