@inject IGameResourcesProvider Resources

<p class="alert alert-info">
    Manage custom spells. Add, edit, remove spells customized with metamagic.
</p>
@if (CustomSpells == null) {
    <div class="row">
        <div class="col-md-12">
            <button class="btn btn-info" @onclick="() => UnlockCustomSpells()">
                <span class="oi oi-lock-locked"></span>
                Unlock
            </button>
        </div>
    </div>
}
else {
    
    for (var i = 0; i < CustomSpells.Count; i++){
        var arr = CustomSpells[i];
        <div class="row">
            <div class="col-md-6">
                <h4>Level @i</h4>
            </div>
            <div class="col-md-1">
                <button class="btn btn-sm btn-info btn-h4" @onclick="() => modalAddSpell.OpenAsync()">
                    <span class="oi oi-plus"></span>
                </button>
            </div>
        </div>
        if (arr.Count == 0) {
            <div class="row">
                <div class="col-md-12">
                    <p class="alert alert-info">
                        No spells
                    </p>
                </div>
            </div>
        }
        else {
            foreach (var spell in arr) {
                <div class="row">
                    <div class="col-md-6">
                        @spell.DisplayName
                    </div>
                    <div class="col-md-2">
                        <button class="btn btn-sm btn-default" @onclick="() => EditSpellAsync(spell)">
                            <span class="oi oi-pencil"></span>
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveSpell(spell)">
                            <span class="oi oi-trash"></span>
                        </button>
                    </div>
                </div>
            }
        }
    }

}

<Modal @ref="modalAddSpell">
    <Title>Add spell for level @AddSpellLevel</Title>
    <Body>
        <TabControl StartIndex="0">
            <Tab Name="Search">
                <Content>
                    <Search TItem="IBlueprint" Items="AvailableSpellsBase" ItemSearchable="b => b.Name.DisplayName" Context="item" OnSelect="a => AddSpellBlueprint = a.Item.Id">
                        <ResultItemTemplate>
                            @item.Name.DisplayName
                        </ResultItemTemplate>
                    </Search>
                </Content>
            </Tab>
            <Tab Name="All">
                <Content>
                    <div class="row">
                        <div class="col-md-12">
                            <label class="form-label">Spell</label>
                            <select class="form-control" @bind="AddSpellBlueprint">
                                <option value="">Select spell...</option>
                                @foreach (var blueprint in AvailableSpells) {
                                    <option value="@blueprint.Id">@blueprint.DisplayName</option>
                                }
                            </select>
                        </div>
                    </div>
                </Content>
            </Tab>
        </TabControl>
    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" data-dismiss="modal" disabled="@AddSpellIsInvalid" @onclick="AddSpellAsync">
            Confirm
        </button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalAddSpell.CloseAsync()">Cancel</button>
    </Footer>
</Modal>

<Modal @ref="modalEditSpell">
    <Title>Edit spell @Spell?.DisplayName</Title>
    <Body>
        @if (Spell != null) {
        <div class="row">
            <div class="col-md-4">
                <label class="form-label">Cost</label>
                <input type="number" class="form-control" @bind="Spell.MetamagicData.SpellLevelCost" />
            </div>
            <div class="col-md-4">
                <label class="form-label">Color</label>
                <input type="number" min="1" max="20" class="form-control" @bind="DecorationColor" />
            </div>
            <div class="col-md-4">
                <label class="form-label">Border</label>
                <input type="number" min="1" max="11" class="form-control" @bind="DecorationBorder" />
            </div>
        </div>
        <div class="row">
            @foreach (var meta in Spell.MetamagicData.Metamagic) {
            <div class="col-md-3">
                <label class="form-label form-label-centered">@meta.Name</label>
                <input type="checkbox" class="form-control" @bind="meta.IsActive" />
            </div>
            }
        </div>
        }
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalEditSpell.CloseAsync()">Done</button>
    </Footer>
</Modal>

@code {
    [Parameter]
    public CharacterSpellbookModel Spellbook { get; set; }

    private ListD2Accessor<CustomSpellModel> CustomSpells => Spellbook.CustomSpells;

    private bool OrderByName = true;

    private IEnumerable<IBlueprint> AvailableSpellsBase => Resources.Blueprints.GetEntries(BlueprintTypes.Ability)
        .Where(IsValidSpell);

    private IEnumerable<IBlueprint> AvailableSpells => OrderByName ? AvailableSpellsBase.OrderBy(x => x.Name.DisplayName) : AvailableSpellsBase;

    private bool IsValidSpell(IBlueprint x)
    {
        return !Spells.IsSpecial(x);
    }

    private CustomSpellModel Spell;
    private int DecorationColor { get => Spell.DecorationColorNumber + 1; set => Spell.DecorationColorNumber = value - 1; }
    private int DecorationBorder { get => Spell.DecorationBorderNumber + 1; set => Spell.DecorationBorderNumber = value - 1; }
    private Modal modalEditSpell;
    private Modal modalAddSpell;
    private string AddSpellBlueprint;
    private int AddSpellLevel;
    private bool AddSpellIsInvalid => string.IsNullOrEmpty(AddSpellBlueprint);

    private void SelectAddSpellBlueprint(IBlueprint blueprint)
    {
        AddSpellBlueprint = blueprint.Id;
    }

    private void UnlockCustomSpells()
    {
        Spellbook.EnableCustomSpells();
    }

    private async Task AddSpellAsync()
    {
        var spell = CustomSpells.Add(AddSpellLevel, (refs, obj) => { obj.Add("MetamagicData", refs.Create()); });
        spell.Blueprint = AddSpellBlueprint;
        spell.UniqueId = Guid.NewGuid().ToString();
        spell.DecorationBorderNumber = 0;
        spell.DecorationColorNumber = 0;
        spell.MetamagicData.SpellLevelCost = 0;
        spell.MetamagicData.MetamagicMask = "";

        AddSpellBlueprint = null;
        AddSpellLevel = 0;
        await modalAddSpell.CloseAsync();

        await EditSpellAsync(spell);
    }

    private async Task EditSpellAsync(CustomSpellModel spell)
    {
        Spell = spell;
        await modalEditSpell.OpenAsync();
    }

    private void RemoveSpell(CustomSpellModel spell)
    {
        CustomSpells.Remove(spell);
    }
}
