@using Arcemi.Pathfinder.SaveGameEditor.Components.Modals
@inject CharacterViewModel Model
@inject IGameResourcesProvider Resources

<div class="row g-3">
    @if (Unit.IsPet) {
    <div class="col-md-4">
        <label class="form-label">Owner</label>
        <input class="form-control" type="text" readonly="readonly" value="@(Model.GetOwnerOf(Unit)?.Descriptor.Name ?? "N/A")" />
    </div>
    }
    else {
    <div class="col-md-4">
        <label class="form-label">Race</label>
        <input class="form-control" type="text" readonly="readonly" value="@Character.Progression.RaceName" />
    </div>
    }
    <div class="col-md-4">
        <label class="form-label">Voice</label>
        <select class="form-control" @bind="Character.CustomAsks">
            <option value="">Default</option>
            @foreach (var blueprint in Resources.Blueprints.GetEntries(BlueprintTypes.UnitAsksList).OrderBy(b => b.DisplayName)) {
            <option value="@blueprint.Id">@blueprint.DisplayName</option>
            }
        </select>
    </div>
    @if (CompanionPart != null) {
    <div class="col-md-4">
        <label class="form-label">State</label>
        <select class="form-control" disabled="@Unit.IsPlayer" @bind="CompanionPart.State">
            @foreach (var state in CompanionPartState.All){
                <option value="@state.Key">@state.Value</option>
            }
        </select>
    </div>
    }
</div>

@if (Model.IsPlayerButNotMainCharacter(Unit)) {
<div class="row">
    <div class="col-md-3">
        <button class="btn btn-info w-100" @onclick="() => Model.SetAsHero(Unit)" title="You are not set as the main character, fix it by pressing this button">
            <span class="oi oi-wrench"></span>
            Main Char
        </button>
    </div>
</div>
}

<div class="row g-3">
    <div class="col-md-4">
        <label class="form-label">Experience</label>
        <input class="form-control" type="number" @bind="@Character.Progression.Experience" />
    </div>
    <div class="col-md-2">
        <label class="form-label">
            Level
            <Help Size="ElementSize.Small">
                The save game file does not save your current level, it is calculated based on the experience of your characters.
            </Help>
        </label>
        <input class="form-control" type="number" readonly="readonly" value="@Character.Progression.CurrentLevel" />
    </div>
    <div class="col-md-2">
        <label class="form-label" title="Mythic level (0-10)">Mythic</label>
        <input class="form-control" type="number" min="0" max="10" title="Mythic level (0-10)" @bind="Character.Progression.MythicExperience" />
    </div>
</div>

<div class="row">
    <h3 class="col-md-12">Classes</h3>
</div>
<div class="row form-list-header">
    <div class="col-md-4">
        <label class="form-label">Name</label>
    </div>
    <div class="col-md-4">
        <label class="form-label">Specialization</label>
    </div>
    <div class="col-md-2">
        <label class="form-label">Level</label>
    </div>
    <div class="col-md-2">
    </div>
</div>

@foreach (var cls in Character.Progression.Classes) {
<div class="row g-3">
    <div class="col-md-4 overflow-hidden">
        <label class="form-label">@cls.TypeName</label>
    </div>
    <div class="col-md-4 overflow-hidden">
        <label class="form-label">@cls.ArchetypeName</label>
    </div>
    <div class="col-md-2">
        <input class="form-control" type="number" readonly="readonly" value="@cls.Level" />
    </div>
    <div class="col-md-2">
        @if (!cls.IsMythicChampion) {
        <button class="btn btn-sm btn-warning" disabled="@(cls.Level <= 1)" @onclick="() => DowngradeClass(cls)">
            <span class="oi oi-arrow-thick-bottom"></span>
        </button>
        }
    </div>
</div>
}

<div class="row">
    <h3 class="col-md-12">Alignment</h3>
</div>
<div class="row g-3">
    <div class="col-md-3">
        <div class="row g-3">
            <div class="col-md-12">
                <label class="form-label">@Character?.Alignment?.Vector?.DisplayName</label>
            </div>
        </div>
        <div class="row g-3">
            <div class="col-md-12">
                <label class="form-label">Alignment X-Axis</label>
                <input class="form-control" type="number" min="-100" max="100" @bind="EditAlignmentX" />
            </div>
        </div>
        <div class="row g-3">
            <div class="col-md-12">
                <label class="form-label">Alignment Y-Axis</label>
                <input class="form-control" type="number" min="-100" max="100" @bind="EditAlignmentY" />
            </div>
        </div>
    </div>
    <div class="col-md-9 alignment">
        <img class="alignment-map" src="/images/alignment-map.png" alt="Alignment" />
        <img class="alignment-dot" src="/images/alignment-dot.png" style="left: @(AlignmentX)px; top: @(AlignmentY)px" />
    </div>
</div>

@code {
    [Parameter]
    public UnitEntityModel Unit { get; set; }

    private CharacterModel Character => Unit?.Descriptor;
    private CompanionPartItemModel CompanionPart => Unit?.Parts?.Items?.OfType<CompanionPartItemModel>()?.FirstOrDefault();

    private const int OffsetX = 20;
    private const int OffsetY = 6;
    private int AlignmentX => (Unit?.Descriptor?.Alignment?.Vector?.X ?? 0) + 100 + OffsetX;
    private int AlignmentY => (Unit?.Descriptor?.Alignment?.Vector?.Y ?? 0) *-1 + 100 + OffsetY;
    private int EditAlignmentX { get => Unit?.Descriptor?.Alignment?.Vector?.X ?? 0; set => Unit.Descriptor.Alignment.Vector.X = value; }
    private int EditAlignmentY { get => (Unit?.Descriptor?.Alignment?.Vector?.Y ?? 0)*-1; set => Unit.Descriptor.Alignment.Vector.Y = value*-1; }

    private void DowngradeClass(ClassModel cls)
    {
        Model.DowngradeClass(Unit, cls);
    }
}